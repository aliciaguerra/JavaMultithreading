When we start two or more threads within a program, there may be a situation when multiple threads try to
access the same resource and finally they produce an unforseen result due to the concurrency issue.For example,
if multiple threads try to write within a same file, then they may corrupt the data because one of the threads may
overwrite data or while one thread is opening the same file at the same time the other thread might be closing the 
same file.

So, there is a need to synchronize the actions of multiple threads and make sure that only one thread can access
the resource at a given point in time. This is implemented using a concept called monitors. Each object in Java
is associated with a monitor, which a thread can lock or unlock. Only one thread at a time can hold a lock on a 
monitor.

Java programming language provides a very handy way of creating threads and synchronizing their tasks by using synchronized
blocks. You keep shared resources within this block.
Following is the general form of the synchronized statement:
    synchronized(objectIdentifier) {
     //access shared variables and other shared resources
     }

Here, the objectIdentifier is a reference to an object whose lock associates with the monitor that the synchronized statement
represents. Now we are going to see two examples where we will see a counter using two different threads. When threads
are not synchronized, they print counter value which is not in sequence, but when we print counter by putting inside
syncrhonized() block, then it prints very much in sequence for both threads.
